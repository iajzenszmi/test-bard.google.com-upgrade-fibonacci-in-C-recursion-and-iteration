ian@ian-Latitude-E7440:~$ nano fiboi.c
ian@ian-Latitude-E7440:~$ gcc  fiboi.c
ian@ian-Latitude-E7440:~$ ./a.out
Enter the number of terms: 7
0 1 1 2 3 5 8 
ian@ian-Latitude-E7440:~$ sloccount fiboi.c
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/fiboi.c to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
15      top_dir         ansic=15


Totals grouped by language (dominant language first):
ansic:           15 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 15
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.03)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.05 (0.65)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.04
Total Estimated Cost to Develop                           = $ 329
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Latitude-E7440:~$ cat fiboi.c
#include <stdio.h>

int main() {
  int n;
  printf("Enter the number of terms: ");
  scanf("%d", &n);

  int a = 0, b = 1, next;

  for (int i = 0; i < n; i++) {
    printf("%d ", a);
    next = a + b;
    a = b;
    b = next;
  }

  printf("\n");
  return 0;
}
ian@ian-Latitude-E7440:~$ gcc fiboi.c -S
ian@ian-Latitude-E7440:~$ gcc fiboi.s 
ian@ian-Latitude-E7440:~$ ./a.out
Enter the number of terms: 7
0 1 1 2 3 5 8 
ian@ian-Latitude-E7440:~$ sloccount fiboi.s
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/fiboi.s to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
91      top_dir         asm=91


Totals grouped by language (dominant language first):
asm:             91 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 91
Development Effort Estimate, Person-Years (Person-Months) = 0.02 (0.19)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.11 (1.34)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.14
Total Estimated Cost to Develop                           = $ 2,181
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Latitude-E7440:~$ cat fiboi.s
	.file	"fiboi.c"
	.text
	.section	.rodata
.LC0:
	.string	"Enter the number of terms: "
.LC1:
	.string	"%d"
.LC2:
	.string	"%d "
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	leaq	-28(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC1(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	__isoc99_scanf@PLT
	movl	$0, -24(%rbp)
	movl	$1, -20(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L2
.L3:
	movl	-24(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC2(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	-24(%rbp), %edx
	movl	-20(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	addl	$1, -16(%rbp)
.L2:
	movl	-28(%rbp), %eax
	cmpl	%eax, -16(%rbp)
	jl	.L3
	movl	$10, %edi
	call	putchar@PLT
	movl	$0, %eax
	movq	-8(%rbp), %rdx
	subq	%fs:40, %rdx
	je	.L5
	call	__stack_chk_fail@PLT
.L5:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ian@ian-Latitude-E7440:~$ 
